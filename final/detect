import face_recognition
import pickle
import cv2
import time
import mysql.connector

# MySQL connection setup
conn = mysql.connector.connect(
    host="192.168.137.1",
    user="root",
    password="",  # No password
    database="apsystem"
)
cursor = conn.cursor()

# Load encodings and Haar Cascade
print("[INFO] Loading encodings + face detector...")
data = pickle.loads(open("encodings.pickle", "rb").read())
detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

cap = cv2.VideoCapture(0)
time.sleep(2.0)  # Allow the camera to warm up

# Set to keep track of already recorded IDs within the session
recorded_ids = set()

while True:
    ret, frame = cap.read()
    if not ret:
        print("[ERROR] Couldn't grab frame from webcam")
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    
    # Detect faces in the grayscale frame
    rects = detector.detectMultiScale(gray, scaleFactor=1.1, 
                                      minNeighbors=5, minSize=(30, 30),
                                      flags=cv2.CASCADE_SCALE_IMAGE)
    # Convert bounding boxes to (top, right, bottom, left) format
    boxes = [(y, x + w, y + h, x) for (x, y, w, h) in rects]
    # Compute facial embeddings for each detected face
    encodings = face_recognition.face_encodings(rgb, boxes)
    names = []

    for encoding in encodings:
        matches = face_recognition.compare_faces(data["encodings"], encoding)
        name = "Unknown"
        
        if True in matches:
            matchedIdxs = [i for (i, b) in enumerate(matches) if b]
            counts = {}

            for i in matchedIdxs:
                name = data["names"][i]
                counts[name] = counts.get(name, 0) + 1

            name = max(counts, key=counts.get)

            # Update attendance only if the employee ID hasn't been recorded in this session
            if name not in recorded_ids:
                cursor.execute(
                    "INSERT INTO attendance (employee_id, timestamp) VALUES (%s, NOW())",
                    (name,)
                )
                conn.commit()
                print(f"[INFO] Attendance updated for employee ID: {name}")
                recorded_ids.add(name)  # Mark this ID as recorded in the session

        names.append(name)

    for ((top, right, bottom, left), name) in zip(boxes, names):
        # Draw a green rectangle around each detected face
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
        
        # Display the employee ID above the face
        label = f"ID: {name}" if name != "Unknown" else name
        y = top - 10 if top - 10 > 10 else top + 10
        cv2.putText(frame, label, (left, y), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

        # Display "Attendance updated" below the face if attendance was updated for this name
        if name in recorded_ids:
            cv2.putText(frame, "Attendance updated", (left, bottom + 20), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    # Display the frame
    cv2.imshow("Facial Recognition - Attendance System", frame)

    # Exit the loop if 'q' is pressed
    key = cv2.waitKey(1) & 0xFF
    if key == ord("q"):
        break

# Cleanup
cap.release()
cv2.destroyAllWindows()
cursor.close()
conn.close()
